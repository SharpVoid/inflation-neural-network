import pandas as pd
import numpy as np
import datetime
from tqdm import tqdm
from keras import Sequential
from keras.layers import Dense


def prevDate(givenDate):
    y, m, d = map(int, str(givenDate).split()[0].split('-'))
    gDate = datetime.datetime(y, m, d)
    return pd.to_datetime(str(gDate + datetime.timedelta(days=1)))


def pred(a):
    x = np.array([a])
    return model.predict(x)


def pred2(a):
    x = np.array([a])
    return model.predict(x)


df = pd.read_csv('test6.csv', sep='\t', nrows=16000000)
print("Dataset read")

drop = False
df["DateObserve"] = pd.to_datetime(df["DateObserve"])
df = df.drop_duplicates(keep='first').reset_index(drop=True)
print("Dropped dups")

if not drop:
    df.fillna(method='pad', inplace=True)
    print("filled NaN")

else:
    df = df.dropna(subset='CurrentPrice').reset_index(drop=True)

df.sort_values(by=['WebPriceId', 'DateObserve'], inplace=True)
print("Sorted 1")

df['Date'] = pd.to_datetime(df['DateObserve'].dt.strftime('%Y%m%d'), format='%Y%m%d')
print("Date ready")
start_date = df['Date'][0]

mn = df['WebPriceId'].value_counts().mean()

weak_data = df['WebPriceId'].value_counts()[df['WebPriceId'].value_counts() < mn].keys().to_list()

weak_indexes = []

all_ = df['WebPriceId'].to_list()

print("weak_ids")
for i in tqdm(range(len(all_))):
    if all_[i] in weak_data:
        weak_indexes.append(i)

print("after", len(weak_indexes))

df.drop(weak_indexes, inplace=True)
df.reset_index(drop=True, inplace=True)

epc = [0]
for i in tqdm(range(1, len(df['Date']))):
    if df['WebPriceId'][i] == df['WebPriceId'][i - 1]:
        item_epc = df['CurrentPrice'][i] / df['CurrentPrice'][i - 1]
        item_epc -= 1
        epc.append(item_epc)
    else:
        epc.append(0)

df['CPI'] = epc
print("EPC ready")

df2 = df[['Date']].copy()
moth_cpi = []
df2 = df2.drop_duplicates(keep='first').reset_index(drop=True)
for i in tqdm(range(len(df2['Date']))):
    moth_cpi.append(df.loc[df['Date'] == df2['Date'][i]]['CPI'].sum() / len(df.loc[df['Date'] == df2['Date'][i]]))

df2['DayCPI'] = moth_cpi
df2.sort_values(by='Date', inplace=True)
df2.reset_index(drop=True, inplace=True)
print("DayCpi ready")

matrix = np.zeros((24, 31))
print("start_date =", start_date)
for i in range(24):
    for j in range(31):
        if len(df2.loc[df2['Date'] == start_date]['DayCPI']) != 0:
            day_cpi = df2.loc[df2['Date'] == start_date]['DayCPI']
            day_cpi = day_cpi.to_list()[0]
            if np.isinf(day_cpi):
                day_cpi = 0
            matrix[i][j] = day_cpi
        start_date = prevDate(start_date)

print(matrix.tolist())


y_train = np.array([0.28, -0.065, -0.005, 0.315, 0, 0.375, 0.35, 0.38, 0.685, 0.255, 0.13, 0.485,
                    0.25, -0.135, 0.35, 0.345, 0.675, 0.74, 1.255, 0.355, 1.335, 3.555, 1.89, 1.56])

x_train = np.array(
    [[-0.0007978189942379131, -0.009429876023820508, 0.0, 0.0, 0.01714233595098026, 0.028467081005611145, 0.0, 0.30408198519593294, -0.06997978753702855, 0.4620060481549375, -0.18977756431238335, 0.02340570220137585, -0.11491090864812865, 0.2429072261732182, -0.04236936262929397, -0.1603960019002181, -0.035713876838892496, 0.011614431726846909, -0.019194918898341472, -0.09235307142608488, -0.13221432455439464, 0.13735367860270248, -0.4427271931366844, 0.02269205378065326, 0.16715685705391628, -0.01781239903579195, 0.0, -0.1613283199691122, 0.6968916750013581, -0.021449507639841284, 0.11764229560865894], [-0.009344976607871678, -0.13487477540983225, 0.0, -0.05756283402768172, 0.12268711792653761, 0.18912171326364963, 0.20694826479344774, 0.02554395245087695, 673.5860706042876, 0.47359278056870485, 0.2863014615012677, 0.4710457087548304, 4.610925405579914, 2.573644204449095, 21.93408719774596, 6.036890873022227, 0.2924637086077131, 0.9595661126253375, 0.0, 0.16137636184246873, 0.16914975978842295, 0.004747425217948839, 0.041856114763162255, 0.0, 0.7153985436360827, 0.6194857983151746, 0.5853920587422814, 0.13373847206809866, 2.7814857470607315, 0.5757374033222304, 0.8304089430272656], [0.724020520549961, 1.3584327688795077, 0.515427327383812, 0.2675020761743778, 0.19838751610228997, 3.44114986607148, 0.16902209153268363, 0.3732739961335161, 0.03748119241641032, 0.01535071212386549, 0.04866684240981299, -0.0018486119370575986, 0.4931684747446785, 0.2001576934667743, 0.042657535121039175, 0.11979200226174369, 0.05367873377355048, 0.08623301547155586, 0.10990655056308286, -0.01440179757421148, 0.2056553584830199, 0.11806187143617976, 0.024416224786129512, 0.1387412679813405, 0.1763304170977438, 0.29330806221472633, 0.16061656420208278, 0.0, 0.0, 0.06504184044867033, 0.1010722770123804], [0.10234227724376654, 0.08428997572400591, 0.02226927268880765, 0.09416062098681165, 0.3387874002632771, 0.34950046664556217, 0.3066733593781032, 0.46628498341737257, 0.28187088238258023, 0.03970532325190132, 0.039953268539608296, 0.042676076060360814, 1465.0619161540933, 0.0, 0.19199329104664303, 135.10912781628102, 152.27370761131334, 270.1787450448136, 1145.1154886334543, 0.18682495429700974, -0.04669521597068789, 0.20826815185867628, 0.18224096837863246, 166.15888448582672, 0.09081740685950083, -0.018961983800564502, 0.26075886230079026, -0.036662009639361046, 0.13731491213990826, -0.010046555900490518, -0.0015054237389824786], [0.08263574889626185, 335.0001486767116, 0.002800562513314753, 2.47733087186537, 0.0688112794274634, 0.037588434356687093, -0.04314557657650512, 637.5661255163316, -0.0051172608354851145, 319.9042627129048, 3334.582116033122, 0.0, 4333.105014636805, 238.85564011927644, 545.5672750536378, 0.0, 0.08309240252126808, -0.020797159296767367, 0.538848511411826, 0.2893139345864241, 0.06986044665651517, 0.0069218551821149735, 0.007268645126160809, -0.06476692343148109, 0.0, -0.02499851026779125, 0.06252175606377855, 0.03027795791343293, -0.012593668129989412, -0.004621503349053942, 3.0214883990518597], [0.007523605980126799, 0.0, -0.06979479373848381, 0.010701259940911532, 0.030970039100954284, 0.1121868382780539, 0.09733170592530785, 0.04084390839173764, -0.10026452139288619, 0.09837975096465612, 0.05908280006577923, 0.039163147919744144, 0.03223141972962471, 0.0, 0.047412806224720445, 0.6174485804578457, 0.03911738164972715, 0.009005186163276505, 0.0, 0.050557272650705865, 0.09945988666888236, 0.053218076178523775, 0.03267028014487253, 0.23163055751390776, 0.0, 0.19515410337916228, 0.08733797341778833, 0.03335883673031585, 0.08557403594243601, 0.06119014635847003, 0.08222962887685163], [0.02798751931139859, -0.08137784952521954, 0.0, 0.0034827032656925103, 0.17121297878943778, 0.018197255954263088, -0.04133482201932073, -0.018019465223037254, 0.0, 0.0, 0.0, 0.03055409781445123, 0.0, 0.0, -0.04518584514515857, 0.1081969289855077, -0.025726131131068516, 0.013857371565703774, -0.006217497478589509, 0.17784881611009537, 0.0, 0.1816084867035739, 0.0, 0.0, 0.0, 0.0, 0.08403786479004983, 0.0, 0.0, 0.0, 0.0], [0.03837088877786609, 0.024100026477953, -0.003721857989913791, 0.0, 0.04953917899334228, 0.09349089851146367, 0.0, 0.00507097871834037, 0.03605680191303598, 0.014999203383095863, 0.2328413187155344, 0.04701949540989628, 0.0, 0.011569272403906799, 0.0, 0.0, 0.0, 0.0, 0.018184099794326503, 0.016499123273845194, 0.0, 0.04336670843087343, 0.03196771614866207, 0.0, 0.0, 0.030252695081173696, 0.029436995834213213, 0.0, 0.0, 0.0, 0.041458987433588605], [0.04088612602575715, 0.07403386958812151, -0.03436704558557304, -0.08040528840017318, -0.05449359860490828, -0.030722308842747556, -0.03411378611987762, 0.045140267897707774, 0.012382926321999988, 0.0137682692725386, 0.03874243441943929, 0.09290887948482571, 0.03016711221989416, 0.05132159938455774, 0.016236846245320086, 0.05487083856130762, 0.03129423904937685, 0.033893518846414526, 0.017660404321910128, 0.01116637636982013, 0.020428311338416747, 0.0, 0.011531104084810007, 0.023049842821779836, 0.04851865109619393, 0.0, -0.019064566545703213, 0.0033238963970354447, 0.023890699798401943, 0.034183832275009984, -0.011306718012796597], [-0.014985446358610804, -0.02093322907501915, -0.00972113100017161, 0.029558849681453583, 0.007862321371403238, 0.02992377548770154, 0.021997065550710158, -0.032165898839794205, 0.024633224200501663, 0.006030853694145567, 0.012744785599288391, 0.006030848856104887, 0.0693137523905212, 0.010723045073828527, 0.04127255773922757, 0.1076936431749141, 0.012687671637192317, 0.1485813681659816, -0.03131058594802638, 0.0, 0.023378099152973203, -0.010735513880784241, 0.1317489881979921, 0.025301905567088438, 0.04122816524068921, 0.710516171824471, 0.7271107130609552, 0.033756998117478745, 0.1028831055710852, 0.021420578387712164, 0.03497780613816157], [0.06267239821965731, 0.06258604629242268, 0.09900557470649077, 0.14431947618800592, 0.022019904474130388, 0.14650725648289278, 0.10823989065906146, 0.015328411199849372, 0.0, 0.0, 0.06170523462929318, 0.05862968459801976, 0.14123506352923254, 0.02938290817574319, 0.04740588285064632, 0.021702014499949907, 0.0, -0.008054065168569699, 0.05130758219168904, 0.12251696446344071, 0.006474890460948626, 0.020695121666977026, 0.22074061834879496, -0.059174311921236976, 0.25150233182575704, 0.0002585895485919361, 0.0, 0.013843005715282145, 0.1613148992575103, 0.07522215956483123, 0.031367652030827246], [-0.020426594893105447, 0.03375866689355403, 0.12295825881066594, 0.17611497945384852, 0.01548007190135156, 0.04401940268168302, 0.076380646245301, 0.021674481064582956, 0.007621435463179954, 0.05671294859521965, 0.020189990885150277, 0.09168374757529982, 0.14942052593659608, 0.3001184939068726, -0.051084169996018794, 0.03164906207969171, -0.04343957968767378, 0.024564449216082036, -0.003723867283949967, -0.024181123910861097, 0.05319351170695626, 0.034408423000802005, 0.04914450950329273, 0.12226496060538855, 0.0563674256633637, 0.15051900370754498, 0.026325004227823138, -0.06750927388300633, 0.005685208609392342, 0.0022702928386974346, 0.018875214169856228], [0.06326808997067719, 0.030892342719552754, 0.0768002478562581, -0.062785854365853, 0.01811035234950251, 0.031504590035797336, 0.06996875679237123, 0.036052396868479324, 0.04548814141793431, 0.12892196466256997, 0.05102940704959866, 0.06765987525167705, 0.15866832392105987, -0.011400078055580146, 0.08654495012550106, 0.021111623522192837, 0.4379995959487682, 0.0, -0.00691645324156183, 0.006179462393185393, 0.034665539278170135, 0.02369992255753423, 0.0, -0.12989414400476254, 0.014850541868313498, 0.14546473234907298, 0.04374914359970466, 0.10954762548288621, 0.014420068860086427, 0.06413446200257814, 0.09480688025157288], [0.026319631709907906, 0.019054501037689454, -0.019909009439284312, 0.05782485057021863, -0.00481491907621137, 0.04434064420559414, 0.1012992011804907, 0.08333609845627256, -0.008851374558068507, 0.007838820097621432, 0.002750915165495311, 0.02534979751414025, 0.016382860725390972, 0.0038679412422984293, -0.0502551311144057, 0.010647927401840914, 0.011505720342389336, 0.04946999096623254, -0.0003920024780685505, -0.0026955000911466614, -0.027172988746883057, 0.0, 0.06131249681404095, 0.12654972724161193, 0.014172516919885785, 0.05803624744766351, 0.017125266631614434, 0.11507897263097171, 0.07843007589415489, 0.002022699692456289, 0.036081892968430035], [0.12206924310074882, 0.08799052196914191, 0.16496442024297678, 0.04992306523465204, 0.027673380367582684, 0.021197471766789162, 0.00899906036983217, 0.08329006475821635, -7.424445866716836e-05, 0.046486922743200834, 0.12468924165639354, 0.0022553040593523504, -0.013668749720689466, 0.008663110802682353, 0.02009013030245784, 0.015765164190236686, 0.029573219992525695, -0.030303174325398113, 0.007421821555185693, 0.048696197717265494, -0.12222404901187228, 0.040889071837819854, 0.0340443567910983, 0.03943502824170236, 0.08418005423773291, 0.15364050862656894, 0.06632871535917757, 0.0499598267855234, 0.08259052542487841, 0.059988577885578404, 0.009011074936314315], [0.04164336188021204, 0.03665296004080051, -0.044497670394772704, 0.039512776358313774, 0.08560961022980178, -0.0034080460487783317, 0.046219113244259584, 0.016244407769333034, 0.06421790062883369, 0.08338710586957372, 0.08966351809957518, 0.45865295818010854, 0.05365824035841327, 0.10745253308946888, 0.16003842208833505, -0.09654847554850006, 0.0, 0.15841169696099255, 0.061263416366133826, 0.06575491121940552, 0.03654895999970815, 0.04580538133911675, 0.0643576399114578, 0.01651879939699113, 0.013048345940258273, -0.014901408099765789, 0.013623830722482695, 0.26965387147928777, -0.006194154078285967, 0.24752714198362757, 0.04164805246836868], [0.029618355077227133, 0.08365450820584715, 0.016196191578777764, 0.00999804810110649, 0.009216761309422178, 0.20194729470077843, 0.016526319098193173, -0.025013562786668764, 0.03250522294928533, 0.04381426563279344, 0.004210503838196825, 0.010210999684020661, 0.040789619353528615, -0.03289497484107549, 0.01735660164873781, 0.10163019054526412, 0.004504214147451773, 0.1340930924606757, 0.07347120847499082, 0.0, 0.04646812403896367, 0.05222690770167069, 0.00725729603831193, 0.001428229160631523, 0.005043083678073505, 0.047261707518447604, 0.13578881545948784, -0.24602609620705318, 0.0, 0.17639867838391055, 0.06362668159766548], [0.07916493802943779, 0.028898724791242877, 0.02552520518490031, 0.052218768209874866, 0.0014036424162826352, 0.02959085105622745, 0.0, -0.00026214323672097003, -0.005063327306614972, 0.0, 0.16254745496104994, -0.20965592542848457, 0.06642179803948468, 0.13033286442024006, 0.17483020682238026, 0.020092523426315425, 0.0, 0.013233822724712524, 0.3156957042819634, -0.0029255361458210205, 0.05100816375079636, 0.01664201123831953, 0.056515586380644925, 0.019080420920963043, 0.010142257955085162, -0.08192471026793292, 0.00964634818008178, -0.005432591444087702, 0.1910279499050108, 0.14816424487405264, -0.050398254479522626], [-0.06842170666904228, -0.06593006413935976, -0.008212686128293178, 0.07947458712783044, 0.12182282753500102, 0.19377152670737877, -0.0660629566202565, -0.02810399690713905, 0.07121605731233219, 0.08310633475629149, 0.03463937223793828, 0.15920029457961163, 0.35205060175386294, -0.1381113363503789, 0.014844187577870599, 0.011409225951285495, 0.13684953068207267, 0.03929567116071339, -0.1063308736931773, 0.0461779801136202, -0.1561001085839097, 0.0324581474975719, 0.08350053920847908, 0.015581922209382268, 0.0030879152817769977, -0.05082918046669251, 0.08947153560162802, 0.05375551026393919, 0.047598789760451475, -0.004071329465062032, 0.03389095029801601], [0.01806647922842339, 0.023001022891203027, 0.3484846582441859, 0.013317826274352695, -0.05986200147987504, 0.05578276058594776, -0.008483750287465114, 0.0414750724220844, 0.2227889696348965, 0.14192263660183704, 0.01261470301374752, -0.08956913769159346, 0.0973953850015606, 0.018617767755669305, 0.026534118745770652, 0.03297529649093642, 0.055742404370340476, 0.0, -0.07642136675914546, 0.08763227268171114, 0.02652674572437716, 0.047825519863359825, 0.08286176057067034, 0.06739494016730514, 0.04748186587145259, 0.02483524923970218, 0.06470001663000012, 0.141739473434809, 0.14096730057578463, 0.08775106632745965, 0.13421445283706088], [0.09685882810288837, 0.26630170706892237, 0.3533854698888096, 0.22552505595123948, 0.1352705008521374, 0.1912569040154852, 0.11825585990777167, 0.18312913665761205, 0.18294593037035062, 0.1557825935797348, 0.13379576592991674, 0.061751215457600865, 0.12159515144140885, 0.07220907943303026, 0.0, 0.2253973074920743, 0.4006692880258006, 0.07497101081652666, 0.030787431063992527, 0.035304052153635676, 0.04921434041178734, 0.030245182732328558, 0.0022428024718281025, 0.03213701077527052, 0.018166104819046614, 0.00035471855417271045, 0.08581329191312861, 0.0025311707809314164, 0.004778783479800609, 0.013893784268632303, 0.0], [0.0, 0.029502721405839535, 0.009503649134780016, 0.02143625181747646, 0.03470254101479556, 0.014664917783161325, 0.1353420254601939, 0.1362568206152001, 0.14291767588747528, -0.03500918632743387, 0.0, 0.06588841294563269, 0.2947371351807562, -0.00012302582527629898, -0.004360816296246147, 0.00754035347397669, 0.01949028617574095, 0.03317891886282837, 0.0, 0.048729831170567554, 22.222218532008387, 0.006948936962282709, 0.024544253594129067, 0.015257136722742837, 0.06756246793470724, 0.015900213000210408, -0.0344997351634412, 0.005536148970202852, -0.0044561172321138254, -0.0081364247995508, 0.008167870765342415], [-0.0010365874240539023, -0.0014994781942542028, 0.026899844772604892, 0.011945033352650526, 0.02417295428626026, 0.04512201912060271, 0.012175563949919694, 0.020959066178613248, 0.005207563535177282, 0.01503233342349072, 0.03320475609317041, -0.017332566149326305, -0.024359392521991333, -0.00017627250407019416, 0.02028204273969918, 0.08210107876700827, 0.031526723631359777, 0.04624302662778462, -0.009314496112493615, -0.00012083043175936382, -0.02869497572673724, -0.04359094839018264, 0.0031951275084641222, 0.015078698448945058, 0.0232111194415615, 0.047071637153015544, -0.01693120559094582, -0.014700727466398623, -0.019183177608556992, 0.01141823001022645, -0.00864814695693468], [0.004966395104639325, 0.0, -0.001435758431913322, 0.010633854162646637, 0.007477168306316096, 0.03003094532637826, 0.02707975212170618, 0.028137126635751325, 0.0354643168095496, 0.031860003473066174, 0.03690726954062681, -0.00971182927404632, 0.0, 0.020354282886084697, 0.006232151331865313, 0.008963442910684842, -0.002373506652265424, 0.02394254102408366, -0.004479594706377986, 0.012874460009060845, 0.031386758066606915, 0.006769406817539274, -0.007086299987948109, -0.0025984277351518005, -0.005298230307844765, -7.839419015030905e-05, 0.012507440093780872, -0.011502078044588035, -0.003696960341011051, -0.007005940236824896, -0.004071772206704993]]
)
print(x_train.shape[1])
model = Sequential()
model.add(Dense(32, activation='linear', input_shape=(x_train.shape[1],)))
model.add(Dense(64, activation='linear'))
model.add(Dense(1, activation='linear'))  # sigmoid, т.к. данные от 0 до 1

print(model.summary())  # архитектура нашей модели

model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])

history = model.fit(x_train,
                    y_train,
                    epochs=600,
                    validation_split=0.8,
                    verbose=2
                    )


def pred(a):
    x = np.array([a])
    return (model.predict(x))


x_test = matrix.tolist()
print(model.evaluate(x_train, y_train))
print(pred(x_test[6]))

